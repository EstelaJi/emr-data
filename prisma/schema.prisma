// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Franchisor table to handle franchisor relationships
model Franchisor {
  id          String   @id @default(cuid())
  franchisorId String  @unique
  name        String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relations
  agencies    Agency[]
  caregivers  Caregiver[]
  carelogs    Carelog[]
}

// Agency table to normalize agency data
model Agency {
  id          String   @id @default(cuid())
  agencyId    String
  name        String?
  franchisorId String
  subdomain   String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relations
  franchisor  Franchisor @relation(fields: [franchisorId], references: [franchisorId])
  caregivers  Caregiver[]
  carelogs    Carelog[]

  @@unique([agencyId, franchisorId])
}

// Location table to normalize location data
model Location {
  id          String   @id @default(cuid())
  locationId  String   @unique
  locationName String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relations
  caregivers  Caregiver[]
}

// Caregiver table with proper foreign key relationships
model Caregiver {
  id               String    @id @default(cuid())
  caregiverId      String    @unique
  externalId       String?
  profileId        String
  franchisorId     String
  agencyId         String
  locationId       String?
  firstName        String
  lastName         String
  email            String?
  phoneNumber      String?
  gender           String?
  applicant        Boolean
  birthdayDate     DateTime?
  onboardingDate   DateTime?
  applicantStatus  String
  status           String
  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt

  // Relations
  franchisor       Franchisor @relation(fields: [franchisorId], references: [franchisorId])
  agency           Agency     @relation(fields: [agencyId, franchisorId], references: [agencyId, franchisorId])
  location         Location?  @relation(fields: [locationId], references: [locationId])
  carelogs         Carelog[]

  @@unique([caregiverId, franchisorId, agencyId])
}

// Carelog table with proper foreign key relationships
model Carelog {
  id                      String    @id @default(cuid())
  carelogId               String    @unique
  caregiverId             String
  franchisorId            String
  agencyId                String
  parentId                String?
  startDatetime           DateTime?
  endDatetime             DateTime?
  clockInActualDatetime   DateTime?
  clockOutActualDatetime  DateTime?
  clockInMethod           String?
  clockOutMethod          String?
  status                  String
  split                   Boolean
  documentation           String?
  generalCommentCharCount Int?
  created_at              DateTime  @default(now())
  updated_at              DateTime  @updatedAt

  // Relations
  caregiver               Caregiver @relation(fields: [caregiverId], references: [caregiverId])
  franchisor              Franchisor @relation(fields: [franchisorId], references: [franchisorId])
  agency                  Agency @relation(fields: [agencyId, franchisorId], references: [agencyId, franchisorId])

  @@unique([carelogId, caregiverId, franchisorId, agencyId])
}
